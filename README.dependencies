# cert-service dependencies

A special step is needed to prepare a dependency for the cert-service build.

cert-service is built using the Spring and Velocity frameworks. However, Spring 5.1 and later versions dropped support for Velocity.
In particular, they removed two packages from release versions of the spring-webmvc artifact:
org.springframework.ui.velocity
org.springframework.web.servlet.view.velocity

Security vulnerabilities in older Spring versions required an upgrade to a Spring version later than 5.1,
but we wanted to avoid major effort to replace Velocity (for example, with the Freemarker package formally
supported in Spring 5.1+). Fortunately, we were able to craft a workaround as described below.

The Apache Velocity team created a drop-in replacement for the org.springframework.ui.velocity package,
available as the artifact org.apache.velocity:spring-velocity-support available online at Maven Central.

For the second package, we extracted the classes from an older version of Spring, specifically 4.3.20.RELEASE
which was the version previously used, and repackaged these classes as the local artifact
edu.washington.iam:uw-spring-velocity-web:4.3.20.RELEASE
The version number was set identical to the Spring version from which they were extracted.
Testing confirmed that this package, along with a new configuration class called IamVelocityConfig, successfully
implemented the Spring-Velocity integration. Furthermore, conversation with the Spring team indicated that this
was a reasonable approach for all Spring 5.X versions. Further investigation will be needed if and when this
application is migrated to Spring 6+.

We made the uw-spring-velocity-web package available by manually installing this into the local Maven cache for
the build user (that is, ~/.m2/repository/edu/washington/iam/uw-spring-velocity-web/4.3.20.RELEASE/).
To build this package in your own environment, you will need to install this package into your own Maven cache,
either by copying this from the build server or rebuilding the package as described above and following Maven
documentation for installing a package into your local cache.

The formally correct way to deploy a local package such as this would be to install it into a local package repository
and configure our Maven build environments to read from that repository. However, this is the first case where we have
ever needed a local package included in our builds and we do not have a local repository solution in place. The use
of the local cache for this is a reasonable approach for now given that this application is only built locally by
a few users who have access to the build server.


